service: core

custom:
  settings:
    searchTable: ServiceProvider
    userTable: UserT
    algoliaAppId: ${ssm:/e-ugostitelji/algolia/app-id}
    algoliaAdminApiKey: ${ssm:/e-ugostitelji/algolia/api-key}
    algoliaIndexName: service_provider
    tableName: ${env:TABLE_NAME}

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs12.x
  stackName: eugostitelji-core-stack
  apiName: eugostitelji-api
  stage: dev
  region: us-east-2
  lambdaHashingVersion: "20201221"

  environment: ${self:custom.settings}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-2:*:*"

functions:
  algoliaSync:
    # Syncs ServiceProvider table to algolia service
    handler: functions/algoliaSync.main
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ServiceProvider.StreamArn

  #   create:
  #     handler: create.main
  #     events:
  #       - http:
  #           path: places
  #           method: post
  getServiceProvider:
    handler: functions/getServiceProvider.main
    events:
      - http:
          path: places/{id}
          method: get

  listServiceProviders:
    handler: functions/listServiceProviders.main
    events:
      - http:
          path: places
          method: get

  updateServiceProvider:
    handler: functions/updateServiceProvider.main
    events:
      - http:
          path: places/{id}
          method: put
#   delete:
#     handler: delete.main
#     events:
#       - http:
#           path: places/{id}
#           method: delete

resources:
  - ${file(resources/cognito.yml)}
  - ${file(resources/dynamodb.yml)}
